// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_RegisterUser_FullMethodName = "/main.AuthService/RegisterUser"
	AuthService_LoginUser_FullMethodName    = "/main.AuthService/LoginUser"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*TokenMessage, error)
	LoginUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*TokenMessage, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*TokenMessage, error) {
	out := new(TokenMessage)
	err := c.cc.Invoke(ctx, AuthService_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LoginUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*TokenMessage, error) {
	out := new(TokenMessage)
	err := c.cc.Invoke(ctx, AuthService_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	RegisterUser(context.Context, *User) (*TokenMessage, error)
	LoginUser(context.Context, *User) (*TokenMessage, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) RegisterUser(context.Context, *User) (*TokenMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedAuthServiceServer) LoginUser(context.Context, *User) (*TokenMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LoginUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _AuthService_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _AuthService_LoginUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	ProductCardService_AddProductsCards_FullMethodName = "/main.ProductCardService/AddProductsCards"
)

// ProductCardServiceClient is the client API for ProductCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCardServiceClient interface {
	AddProductsCards(ctx context.Context, in *AddProductsCardsReq, opts ...grpc.CallOption) (*Empty, error)
}

type productCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCardServiceClient(cc grpc.ClientConnInterface) ProductCardServiceClient {
	return &productCardServiceClient{cc}
}

func (c *productCardServiceClient) AddProductsCards(ctx context.Context, in *AddProductsCardsReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductCardService_AddProductsCards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCardServiceServer is the server API for ProductCardService service.
// All implementations must embed UnimplementedProductCardServiceServer
// for forward compatibility
type ProductCardServiceServer interface {
	AddProductsCards(context.Context, *AddProductsCardsReq) (*Empty, error)
	mustEmbedUnimplementedProductCardServiceServer()
}

// UnimplementedProductCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCardServiceServer struct {
}

func (UnimplementedProductCardServiceServer) AddProductsCards(context.Context, *AddProductsCardsReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductsCards not implemented")
}
func (UnimplementedProductCardServiceServer) mustEmbedUnimplementedProductCardServiceServer() {}

// UnsafeProductCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCardServiceServer will
// result in compilation errors.
type UnsafeProductCardServiceServer interface {
	mustEmbedUnimplementedProductCardServiceServer()
}

func RegisterProductCardServiceServer(s grpc.ServiceRegistrar, srv ProductCardServiceServer) {
	s.RegisterService(&ProductCardService_ServiceDesc, srv)
}

func _ProductCardService_AddProductsCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductsCardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCardServiceServer).AddProductsCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCardService_AddProductsCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCardServiceServer).AddProductsCards(ctx, req.(*AddProductsCardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCardService_ServiceDesc is the grpc.ServiceDesc for ProductCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ProductCardService",
	HandlerType: (*ProductCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductsCards",
			Handler:    _ProductCardService_AddProductsCards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
