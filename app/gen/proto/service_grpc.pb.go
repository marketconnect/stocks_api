// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_Register_FullMethodName = "/main.AuthService/Register"
	AuthService_Login_FullMethodName    = "/main.AuthService/Login"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, AuthService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Register(context.Context, *AuthRequest) (*TokenResponse, error)
	Login(context.Context, *AuthRequest) (*TokenResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Register(context.Context, *AuthRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) Login(context.Context, *AuthRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	UserSubscriptionsService_GetSubscriptions_FullMethodName = "/main.UserSubscriptionsService/GetSubscriptions"
)

// UserSubscriptionsServiceClient is the client API for UserSubscriptionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSubscriptionsServiceClient interface {
	GetSubscriptions(ctx context.Context, in *UserSubscriptionsRequest, opts ...grpc.CallOption) (*UserSubscriptionsResponse, error)
}

type userSubscriptionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSubscriptionsServiceClient(cc grpc.ClientConnInterface) UserSubscriptionsServiceClient {
	return &userSubscriptionsServiceClient{cc}
}

func (c *userSubscriptionsServiceClient) GetSubscriptions(ctx context.Context, in *UserSubscriptionsRequest, opts ...grpc.CallOption) (*UserSubscriptionsResponse, error) {
	out := new(UserSubscriptionsResponse)
	err := c.cc.Invoke(ctx, UserSubscriptionsService_GetSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSubscriptionsServiceServer is the server API for UserSubscriptionsService service.
// All implementations must embed UnimplementedUserSubscriptionsServiceServer
// for forward compatibility
type UserSubscriptionsServiceServer interface {
	GetSubscriptions(context.Context, *UserSubscriptionsRequest) (*UserSubscriptionsResponse, error)
	mustEmbedUnimplementedUserSubscriptionsServiceServer()
}

// UnimplementedUserSubscriptionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSubscriptionsServiceServer struct {
}

func (UnimplementedUserSubscriptionsServiceServer) GetSubscriptions(context.Context, *UserSubscriptionsRequest) (*UserSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedUserSubscriptionsServiceServer) mustEmbedUnimplementedUserSubscriptionsServiceServer() {
}

// UnsafeUserSubscriptionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSubscriptionsServiceServer will
// result in compilation errors.
type UnsafeUserSubscriptionsServiceServer interface {
	mustEmbedUnimplementedUserSubscriptionsServiceServer()
}

func RegisterUserSubscriptionsServiceServer(s grpc.ServiceRegistrar, srv UserSubscriptionsServiceServer) {
	s.RegisterService(&UserSubscriptionsService_ServiceDesc, srv)
}

func _UserSubscriptionsService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSubscriptionsServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSubscriptionsService_GetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSubscriptionsServiceServer).GetSubscriptions(ctx, req.(*UserSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSubscriptionsService_ServiceDesc is the grpc.ServiceDesc for UserSubscriptionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSubscriptionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.UserSubscriptionsService",
	HandlerType: (*UserSubscriptionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscriptions",
			Handler:    _UserSubscriptionsService_GetSubscriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	ProductCardService_AddProductsCards_FullMethodName = "/main.ProductCardService/AddProductsCards"
	ProductCardService_GetProductsCards_FullMethodName = "/main.ProductCardService/GetProductsCards"
)

// ProductCardServiceClient is the client API for ProductCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCardServiceClient interface {
	AddProductsCards(ctx context.Context, in *AddProductsCardsRequest, opts ...grpc.CallOption) (*AddProductsCardsResponse, error)
	GetProductsCards(ctx context.Context, in *GetProductsCardsRequest, opts ...grpc.CallOption) (*GetProductsCardsResponse, error)
}

type productCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCardServiceClient(cc grpc.ClientConnInterface) ProductCardServiceClient {
	return &productCardServiceClient{cc}
}

func (c *productCardServiceClient) AddProductsCards(ctx context.Context, in *AddProductsCardsRequest, opts ...grpc.CallOption) (*AddProductsCardsResponse, error) {
	out := new(AddProductsCardsResponse)
	err := c.cc.Invoke(ctx, ProductCardService_AddProductsCards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCardServiceClient) GetProductsCards(ctx context.Context, in *GetProductsCardsRequest, opts ...grpc.CallOption) (*GetProductsCardsResponse, error) {
	out := new(GetProductsCardsResponse)
	err := c.cc.Invoke(ctx, ProductCardService_GetProductsCards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCardServiceServer is the server API for ProductCardService service.
// All implementations must embed UnimplementedProductCardServiceServer
// for forward compatibility
type ProductCardServiceServer interface {
	AddProductsCards(context.Context, *AddProductsCardsRequest) (*AddProductsCardsResponse, error)
	GetProductsCards(context.Context, *GetProductsCardsRequest) (*GetProductsCardsResponse, error)
	mustEmbedUnimplementedProductCardServiceServer()
}

// UnimplementedProductCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCardServiceServer struct {
}

func (UnimplementedProductCardServiceServer) AddProductsCards(context.Context, *AddProductsCardsRequest) (*AddProductsCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductsCards not implemented")
}
func (UnimplementedProductCardServiceServer) GetProductsCards(context.Context, *GetProductsCardsRequest) (*GetProductsCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsCards not implemented")
}
func (UnimplementedProductCardServiceServer) mustEmbedUnimplementedProductCardServiceServer() {}

// UnsafeProductCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCardServiceServer will
// result in compilation errors.
type UnsafeProductCardServiceServer interface {
	mustEmbedUnimplementedProductCardServiceServer()
}

func RegisterProductCardServiceServer(s grpc.ServiceRegistrar, srv ProductCardServiceServer) {
	s.RegisterService(&ProductCardService_ServiceDesc, srv)
}

func _ProductCardService_AddProductsCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductsCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCardServiceServer).AddProductsCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCardService_AddProductsCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCardServiceServer).AddProductsCards(ctx, req.(*AddProductsCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCardService_GetProductsCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCardServiceServer).GetProductsCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCardService_GetProductsCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCardServiceServer).GetProductsCards(ctx, req.(*GetProductsCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCardService_ServiceDesc is the grpc.ServiceDesc for ProductCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ProductCardService",
	HandlerType: (*ProductCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductsCards",
			Handler:    _ProductCardService_AddProductsCards_Handler,
		},
		{
			MethodName: "GetProductsCards",
			Handler:    _ProductCardService_GetProductsCards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	StockService_GetStocksFromTo_FullMethodName = "/main.StockService/GetStocksFromTo"
)

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	GetStocksFromTo(ctx context.Context, in *GetStocksFromToReq, opts ...grpc.CallOption) (*GetStocksFromToResp, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetStocksFromTo(ctx context.Context, in *GetStocksFromToReq, opts ...grpc.CallOption) (*GetStocksFromToResp, error) {
	out := new(GetStocksFromToResp)
	err := c.cc.Invoke(ctx, StockService_GetStocksFromTo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility
type StockServiceServer interface {
	GetStocksFromTo(context.Context, *GetStocksFromToReq) (*GetStocksFromToResp, error)
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (UnimplementedStockServiceServer) GetStocksFromTo(context.Context, *GetStocksFromToReq) (*GetStocksFromToResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStocksFromTo not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_GetStocksFromTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStocksFromToReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStocksFromTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_GetStocksFromTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStocksFromTo(ctx, req.(*GetStocksFromToReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStocksFromTo",
			Handler:    _StockService_GetStocksFromTo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
